---
import { cn } from '~/lib/utils'
import { PROJECTS_CONFIG } from '~/config'
import Layout from '~/layouts/Layout.astro'
import SectionDivider from '~/components/base/SectionDivider.astro'
import NumberTicker from '~/components/base/NumberTicker'
import { Image } from 'astro:assets'
import { getAllProjects } from '~/lib/data'

const { title, description, introduce } = PROJECTS_CONFIG
const projects = await getAllProjects()
---

<Layout {title} {description}>
  <div class="relative z-1 py-8 pb-10">
    <div class="px-6 sm:px-8">
      <h1 class="tracking-tight text-4xl sm:text-5xl bg-linear-to-r from-primary to-primary/70 bg-clip-text text-transparent pb-1.5">
        {title}
      </h1>
      <div class="pro text-muted-foreground">
        <p class="mt-2">{introduce}</p>
      </div>
    </div>
    <div class="grid grid-cols-1">
      {
        projects.map((project, index) => {
          return (
            <div>
              <div class="group project-item relative hover:bg-muted/30 dark:hover:bg-muted/30 transition-colors duration-300 px-6 sm:px-8 py-4 ">
                <div class="absolute right-8 top-4 hidden sm:block">
                  {project.data.type == 'icon' && <span class={cn('size-10', project.data.icon)} />}
                  {project.data.type == 'image' && project.data?.icon && (
                    <Image
                      src={project.data?.icon}
                      alt="icon"
                      width={40}
                      height={40}
                      class={cn(project.data.imageClass)}
                      densities={[1, 2]}
                    />
                  )}
                </div>
                {project.data?.image && (
                  <div
                    class="pointer-events-none absolute right-0 top-1/2 opacity-0 z-10 will-change-transform transition-opacity duration-400 ease-out group-hover:opacity-100"
                    style="transform: translate(calc(var(--tx, 0px)), calc(-50% + var(--ty, 0px)));"
                  >
                    {typeof project.data.image === 'string' ? (
                      <img src={project.data.image} alt="preview" class="rounded-md object-cover shadow-lg w-90 h-auto" />
                    ) : (
                      <Image
                        src={project.data.image}
                        alt="preview"
                        width={224}
                        height={144}
                        class="rounded-md object-cover shadow-lg w-90 h-auto"
                        densities={[1, 2]}
                      />
                    )}
                  </div>
                )}
                <a
                  href={project.data.website}
                  target="_blank"
                  class="inline-flex items-center justify-between font-semibold text-lg/relaxed "
                >
                  {project.data.name}
                </a>
                <p class="pr-0 sm:pr-14 text-muted-foreground mb-3">{project.data.description}</p>
                <div class="flex flex-col sm:flex-row gap-4 sm:gap-0 items-start sm:items-center justify-between sm:h-14">
                  <div class="flex gap-4 ">
                    <div class="flex items-center py-1.5 gap-3">
                      {project.data.star && (
                        <>
                          <span class="text-xs uppercase tracking-wide font-medium text-muted-foreground">Stars</span>
                          <span class="font-semibold text-lg tracking-wider">
                            <NumberTicker play value={project.data.star} client:load />
                          </span>
                        </>
                      )}
                    </div>
                    <div class="flex items-center py-1.5 gap-3">
                      {project.data.fork && (
                        <>
                          <span class="text-xs uppercase tracking-wide font-medium text-muted-foreground">Forks</span>
                          <span class="font-semibold text-lg tracking-wider">
                            <NumberTicker play value={project.data.fork} client:load />
                          </span>
                        </>
                      )}
                    </div>
                  </div>
                  <div class="flex items-center gap-5 text-zinc-500 text-sm z-10 ">
                    {project.data.website && (
                      <a
                        href={project.data.website}
                        target="_blank"
                        class="hover:text-zinc-600 dark:hover:text-zinc-100 flex items-center gap-1"
                      >
                        <span class="icon-[mdi--web] size-4" />
                        <span>Website</span>
                      </a>
                    )}
                    {project.data.githubUrl && (
                      <a
                        href={project.data.githubUrl}
                        target="_blank"
                        class="hover:text-zinc-600 dark:hover:text-zinc-100 flex items-center gap-1"
                      >
                        <span class="icon-[mdi--github] size-4" />
                        <span>GitHub</span>
                      </a>
                    )}
                  </div>
                </div>
              </div>
              <SectionDivider className={index == projects.length - 1 ? 'hidden' : ''} />
            </div>
          )
        })
      }
    </div>
  </div>
</Layout>

<script>
  // Smooth follow for project preview translate using lerp
  // Applies to each .project-item container
  const items = Array.from(document.querySelectorAll('.project-item'))
  const ease = 0.12 // lower = smoother/slower

  items.forEach((el) => {
    if (!(el instanceof HTMLElement)) return
    const node = el
    let targetX = 0
    let targetY = 0
    let x = 0
    let y = 0
    let rafId = 0
    let running = false

    const start = () => {
      if (running) return
      running = true
      tick()
    }

    const stopIfSettled = () => {
      // allow animation to continue until near target, then stop
      if (Math.abs(targetX - x) < 0.1 && Math.abs(targetY - y) < 0.1) {
        running = false
        if (rafId) cancelAnimationFrame(rafId)
        rafId = 0
      }
    }

    const onEnter = () => {
      start()
    }

    const onLeave = () => {
      targetX = 0
      targetY = 0
      start()
    }

    function tick() {
      x += (targetX - x) * ease
      y += (targetY - y) * ease
      /** @type {any} */
      node.style.setProperty('--tx', x + 'px')
      /** @type {any} */
      node.style.setProperty('--ty', y + 'px')
      if (running) {
        rafId = requestAnimationFrame(tick)
        stopIfSettled()
      }
    }

    node.addEventListener(
      'pointermove',
      /** @param {PointerEvent} e */ (e) => {
        const r = node.getBoundingClientRect()
        const dx = e.clientX - r.left - r.width / 2
        const dy = e.clientY - r.top - r.height / 2
        targetX = dx * 0.04
        targetY = dy * 0.04
        start()
      }
    )
    node.addEventListener('pointerenter', onEnter)
    node.addEventListener('pointerleave', onLeave)
  })
</script>
